import requests
import random
import threading
import json
import os
import time


start = time.time()
url = "https://feedthisdragon3.chall.malicecyber.com/api/v1"
end_uuid = random.randrange(999999)
cookie = "uuid=cf86a4b9-2666-454d-b65c-b2970b811112; expires=Date; path=/\";"
bad_things = ['bomb', 'fox', 'life']
boo_list = ['null','lilboo', 'midboo', 'bigboo']
shop = []
number_buy = 0
a = 0 
b = 0
roulette = 0
door_list = [True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
error = 0
test = []

def RequestTheDragon(method, item=0, uuid=end_uuid, shop=0):
    global error
    ftd_header={
    "Cookie": f"uuid=df2572c5-361c-42de-9434-af9a9b{uuid};",
    "Authorization": "mynotsosecrettoken",
    "Session": f"df2572c5-361c-42de-9434-af9a9b{uuid}",
    "Itemuuid": f"{item}",
    "Shopuuid": f"{shop}",
    "Origin": "https://feedthisdragon3.chall.malicecyber.com",
    }

    if method == "get":
        request_the_dragon = requests.get(url, headers=ftd_header)
        if request_the_dragon.status_code != 200:
            print("ERROR GET Method :",request_the_dragon.status_code)
            RequestTheDragon("get")
            error =+ 1

    if method == "post":
        request_the_dragon = requests.post(url, headers=ftd_header)
        if request_the_dragon.status_code != 200:
            print("ERROR POST Method :",request_the_dragon.status_code)
            error =+ 1

    return json.loads((request_the_dragon.text))


def door(door):
    for i in range(len(door_list)):
        door_list[i] = False
    
    door_list[door] = True

    # Temporary 0
    response['coin'] = 0


while True:

    try:
        
        # Simple Get Request
        response = RequestTheDragon("get")

        # Get Achivement's Name, Level and Cost
        achivement = [item['acquired'] for item in response['achievements'] if item['acquired'] == True]
        name, level, cost = (
          [item[key] for item in response['upgrades']]
          for key in ['name', 'level', 'cost'])
        if len(achivement)>=8:
            print(response)

        # Get Item's type and Item's UUID
        items_type, items_uuid = (
          [item[key] for item in response['items']]
          for key in ['type', 'uuid'])

        # Get UUID Shop
        if a == 0:
            items_shop = [item['uuid'] for item in response['upgrades']]
            for uuid_shop in items_shop:
                shop.append(uuid_shop)
            a += 1

        # Buy what we need in shop

        # Very ugly code, but I need to gain time. Sorry !

        if response['coin'] >= cost[1] and door_list[0] == True:
            RequestTheDragon("post", 0, end_uuid, items_shop[1]) # Greed lvl 2
            door(1)
        if response['coin'] >= cost[1] and door_list[1] == True:
            RequestTheDragon("post", 0, end_uuid, items_shop[1]) # Greed lvl 3
            door(2)            
        if response['coin'] >= cost[4] and door_list[2] == True:
            RequestTheDragon("post", 0, end_uuid, items_shop[4]) # Bag lvl 2
            door(3)
        if response['coin'] >= cost[0] and door_list[3] == True:
            RequestTheDragon("post", 0, end_uuid, items_shop[0]) # Greed lvl 4
            door(4)
        if response['coin'] >= cost[4] and door_list[4] == True:
            RequestTheDragon("post", 0, end_uuid, items_shop[4]) # bag lvl 3
            door(5)
        if response['coin'] >= cost[0] and door_list[5] == True: 
            RequestTheDragon("post", 0, end_uuid, items_shop[0]) # bag lvl 
            door(6)
        if response['coin'] >= cost[4] and door_list[6] == True:
            RequestTheDragon("post", 0, end_uuid, items_shop[4]) # Bag lvl 4
            door(7)
        if response['coin'] >= cost[4] and door_list[7] == True: 
            RequestTheDragon("post", 0, end_uuid, items_shop[4]) # bag lvl 
            door(8)
        if response['coin'] >= cost[4] and door_list[8] == True: 
            RequestTheDragon("post", 0, end_uuid, items_shop[4]) # bag lvl 
            door(9)
        if response['coin'] >= cost[4] and door_list[9] == True: 
            RequestTheDragon("post", 0, end_uuid, items_shop[4]) # bag lvl 
            door(10)
        if response['coin'] >= cost[4] and door_list[10] == True: 
            RequestTheDragon("post", 0, end_uuid, items_shop[4]) # bag lvl 
            door(11)
        if response['coin'] >= cost[4] and door_list[11] == True: 
            RequestTheDragon("post", 0, end_uuid, items_shop[4]) # bag lvl 
            door(12)
        if response['coin'] >= cost[1] and door_list[12] == True: 
            RequestTheDragon("post", 0, end_uuid, items_shop[1]) # bag lvl 
            door(13)
        if response['coin'] >= cost[1] and door_list[13] == True: 
            RequestTheDragon("post", 0, end_uuid, items_shop[1]) # bag lvl 
            door(14)
    
        if response['coin'] >= cost[4] and door_list[14] == True:
            RequestTheDragon("post", 0, end_uuid, items_shop[4]) # BAG lvl INF


        # Click on everything good
        for item_total in range(0,len(items_type)):
            if items_type[item_total] not in bad_things:
                threading.Thread(target=RequestTheDragon, args=("post", items_uuid[item_total])).start()
                test.append(items_type)

        # Take damage
        if time.time() - start > 3:
            bad_things.pop(2)
            bad_things.append('trap')



        # Clear OutPut
        os.system('cls')

        #Output
        print(f"""
Coin        : {response['coin']}
Health      : {response['health']}
Level       : {response['level']}
Hunger      : {response['hunger']} / {response['hunger_actual']} / {response['hunger_needed']}
Item Found  : {len(items_type)}
Achivement  : {len(achivement)}

Level Feed  : {level[0]} -> {cost[0]} Coin
Level Greed : {level[1]} -> {cost[1]} Coin
Level Bag   : {level[4]} -> {cost[4]} Coin

UUID        : df2572c5-361c-42de-9434-af9a9b{end_uuid}
Time Past   : {time.time() - start}
ERROR       : {error}
DEBUG       : {door_list}
               0      1      2      3      4      5      6      7      8      9      10     11     12  
               
""")


    except KeyboardInterrupt:
        print(" Bip boop, what did i do wrong ?")
        break
